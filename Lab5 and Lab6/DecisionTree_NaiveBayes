import numpy as np 
import pandas as pd
diabetesDataset = "https://raw.githubusercontent.com/mbharti321/MCA4/main/MCA4-DataMining/dataSet/diabetes%20.csv"
data = pd.read_csv(diabetesDataset)
data.head()


#building model
from sklearn.metrics import confusion_matrix 
from sklearn.model_selection import train_test_split 
from sklearn.tree import DecisionTreeClassifier 
from sklearn.metrics import accuracy_score 
from sklearn.metrics import classification_report
from sklearn import datasets
from sklearn import metrics

X = data.values[:, 0:8] 
Y = data.values[:, 8]
print("X=",X.shape)
print("Y=",Y.shape)
   
# Splitting the dataset into train and test 
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 100)
print("X_train=",X_train.shape)
print("Y_train=",y_train.shape)
print("X_test=",X_test.shape)
print("Y_test=",y_test.shape)

#decisiontree
def train_using_gini(X_train, X_test, y_train): 
  
    # Creating the classifier object 
    clf_gini = DecisionTreeClassifier(criterion = "gini", 
            random_state = 100,max_depth=3, min_samples_leaf=5) 
  
    # Performing training 
    clf_gini.fit(X_train, y_train) 
    return clf_gini 
      
def tarin_using_entropy(X_train, X_test, y_train): 
  
    # Decision tree with entropy 
    clf_entropy = DecisionTreeClassifier( 
            criterion = "entropy", random_state = 100, 
            max_depth = 3, min_samples_leaf = 5) 
  
    # Performing training 
    clf_entropy.fit(X_train, y_train) 
    return clf_entropy 

def prediction(X_test, clf_object): 
  
    # Predicton on test with giniIndex 
    y_pred = clf_object.predict(X_test) 
    print("Predicted values:") 
    print(y_pred) 
    return y_pred 
      
# Function to calculate accuracy 
def cal_accuracy(y_test, y_pred): 
      
    print()
    print("Confusion Matrix: ", 
        confusion_matrix(y_test, y_pred).shape)
    print( confusion_matrix(y_test, y_pred))
    print()
      
    print ("Accuracy : ", 
    accuracy_score(y_test,y_pred)*100)
    print()
      
    print("Report : ", 
    classification_report(y_test, y_pred))
    print()

# Driver code 
def main(): 
      
    # Building Phase  
    clf_gini = train_using_gini(X_train, X_test, y_train) 
    clf_entropy = tarin_using_entropy(X_train, X_test, y_train) 
      
    # Operational Phase 
    print("Results Using Gini Index:")
    print()
      
    # Prediction using gini 
    y_pred_gini = prediction(X_test, clf_gini) 
    cal_accuracy(y_test, y_pred_gini) 
      
    print("Results Using Entropy:") 
    # Prediction using entropy 
    y_pred_entropy = prediction(X_test, clf_entropy) 
    cal_accuracy(y_test, y_pred_entropy) 

# Calling main function 
if __name__=="__main__": 
    main()


#GaussianNB
from sklearn.naive_bayes import GaussianNB

print("Naive Bayes using Gaussian")
print()
model = GaussianNB()
model.fit(X_train, y_train)
expected = y_test
predicted = model.predict(X_test)
cal_accuracy(expected,predicted)
