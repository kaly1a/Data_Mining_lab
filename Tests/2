/*
Data Set: Educational Process Mining (EPM): A Learning Analytics Data Set 
The experiments have been carried out with a group of 115 students of first-year, undergraduate engineering major of the University of Genoa. 
The data set contains the students' time series of activities during six sessions of laboratory sessions of the course of digital electronics. There are 6 folders containing the students€™ data per session. Each 'Session' folder contains up to 99 CSV files each dedicated to a specific student log during that session. The number of files in each folder changes due to the number of students present in each session. Each file contains 13 features. 
The features are selected and presented in a suitable format for Process Mining. In this sense, the data is presented per session, per student, and per exercise. Each CSV file belongs to a specific session and a specific student (named by the student Id). Each file contains several exercises of that session presented in the 'exercise' feature. Each 'exercise' contains activities, which start-time, end-time, and other features are allocated to that. Write a python program to analyze the EPM data set for educational data mining using a Decision Tree classifier.
Data Set: A Learning Analytics Data Set (UCI Repository)
Link:https://archive.ics.uci.edu/ml/datasets/Educational+Process+Mining+%28EPM%29%3A+A+Learning+Analytics+Data+Set
Hit: Use necessary pre-processing and data cleaning for the same data set before applying classification and FPM.
    
               A) Consider various time factors to do the decision tree classification.
               B) Extract frequent pattern mining using Apriori.

*/

pip install apyori

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from apyori import apriori
import pyfpgrowth
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix 

dataset = pd.read_csv('dataset.csv', header = None)
print("Dataset Length : ", len(dataset))
print("Dataset shape : ", dataset.shape)

print("Pre-processing the Dataset ..... ")

print(dataset.isnull().sum()) 
#df['columnName'].fillna(value=df['columnName'].mean()) # if there are missing values. then execute this code
print("In this case, there are no missing values")
dataset=dataset.drop(dataset.columns[[0, 1, 2,4,5]], axis = 1 ) # taking only the relevant columns

X=dataset[dataset.columns[1:13]] 
Y=dataset[3]
print(X)


X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.3, random_state=100)
print("Length of X_train : ", len(X_train))
print("Length of X_test : ", len(X_test))

def aprioriAlgorithm():
    print (" Apriori Algorithm ")
    
    records = []
    for i in range(0, 829):
        records.append([str(dataset.values[i,j]) for j in range(0,6 )])
    association_rules=apriori(records, min_support=0.0045,min_confidence=0.2, min_lift=3, min_length=2)
    association_results = list(association_rules)
    print(len(association_results))
    for i in range(0,5):
        print(association_results[i])
    print("________________________________________")

    for item in association_results:
        pair = item[0]
        items = [x for x in pair]
    print("Rule: " + items[0] + "-->" + items[1])
    print("Support: " + str(item[1]))
    print("Confidence: " + str(item[2][0][2]))
    print("Lift: " + str(item[2][0][3]))
    print("________________________________________")
    return

def decisionTree():
    X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.3, random_state=100)
    print("Length of X_train : ", len(X_train))
    print("Length of X_test : ", len(X_test))
    print("___________________Result using Entropy__________________")

    clf_entropy=DecisionTreeClassifier(criterion="entropy",random_state=100, max_depth=3, min_samples_leaf=5)
    clf_entropy.fit(X_train,y_train) # fitting the data

    print("This tree would have 3 layers and 5 leaf nodes")
    y_pred_en=clf_entropy.predict(X_test)
    print(y_pred_en)
    print("Accuracy : ", accuracy_score(y_test,y_pred_en)*100)

    print("Confusion Matrix with size ",confusion_matrix(y_test, y_pred_en).shape)
    print( confusion_matrix(y_test, y_pred_en))  

    print("___________________Result using Gini_____________________")

    clf_gini = DecisionTreeClassifier(criterion = "gini", random_state = 100,max_depth=3, min_samples_leaf=5) 
    clf_gini.fit(X_train, y_train) 
    y_pred_gini=clf_gini.predict(X_test)
    print(y_pred_gini)
    print("Accuracy : ", accuracy_score(y_test,y_pred_gini)*100)
    print("Confusion Matrix with size ",confusion_matrix(y_test, y_pred_gini).shape)
    print( confusion_matrix(y_test, y_pred_gini)) 


choice = 0
while choice!=3:
    
    print("1.Apriori Algorithm")
    print("2.Decision Tree")
    print("3.Exit")
    choice = int(input("Enter the choice : "))
    if(choice == 1):
        aprioriAlgorithm()
        
        break
    elif(choice == 2):
        decisionTree()
        
        break
    elif(choice == 3):
        break
    else:
        print("Invalid Choice")
